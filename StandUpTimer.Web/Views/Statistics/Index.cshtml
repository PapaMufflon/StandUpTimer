@model StandUpTimer.Web.Statistic.StatisticModel

@{
    ViewBag.Title = "Statistics";
}

@section styles
{
    @Styles.Render("~/Content/Statistics.css")
}

<h2>Statistics</h2>

<div id="gantt" style="width: 100%; height: 400px"></div>

@section scripts
{
    @Scripts.Render("~/bundles/d3")

    <script>
        function mingleDateTimes(date, time) {
            return new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes(), time.getSeconds(), 0);
        }

        var tasks = [
    @foreach (var item in Model.Statuses)
    {
        var startDate = string.Format("new Date({0})", Html.DisplayFor(modelItem => item.StartDate));
        var endDate = item.EndDate.Equals("now")
            ? string.Format("mingleDateTimes({0}, new Date())", item.StartDate)
            : string.Format("new Date({0})", Html.DisplayFor(modelItem => item.EndDate));
        var taskName = Html.DisplayFor(modelItem => item.Day);
        var status = Html.DisplayFor(modelItem => item.DeskState);

        @:{ "startDate": @startDate, "endDate": @endDate, "taskName": "@taskName", "status": "@status" },
    }
        ];

        var taskStatus = {
            "Standing": "standing",
            "Sitting": "sitting",
            "Inactive": "inactive"
        };

        var taskNames = [
            @foreach (var day in Model.Days)
            {
                @:"@Html.DisplayFor(modelItem => day)",
            }
        ];

        tasks.sort(function (a, b) {
            return a.endDate - b.endDate;
        });
        var maxDate = tasks[tasks.length - 1].endDate;
        tasks.sort(function (a, b) {
            return a.startDate - b.startDate;
        });
        var minDate = tasks[0].startDate;

        var format = "%H:%M";

        var gantt = d3.gantt("#gantt").taskTypes(taskNames).taskStatus(taskStatus).tickFormat(format);
        gantt(tasks);
    </script>
}